#!/usr/bin/python3

import sys
import glob
import re
from io import BytesIO
import json
import pprint
import requests
import time
import subprocess
import datetime
import re

#client id and client secret
#client = '97d8e45c-3605-465b-867a-dd83151bda43'
#access_token = 'dd281545-165a-49e0-aad7-6c3ff54ab5e7'

base_dir = '/sys/bus/w1/devices/'
#device_folder = glob.glob(base_dir + '28*')[0]
#device_file = device_folder + '/w1_slave'

#device id array
dsid = [ '28-800000262ce2'
#,	'28-800000272F0F'
]

#device name array
dsname = ['Test waterproof sensor'
#,	'Test mini sensor'	
]

#device APP ID (get from ST mobile app)
dsappid = ['4ec5b43c-fb2d-4043-8f2a-4514ba6a8b2a'
]

#device access_token (get from ST mobile app)
ds_token= ['8c98af31-267e-4704-aa10-fe696f34c041'
]

### no modifications should be needed below this line
# ===================================================

#endpoints array
num_devices = len(dsappid)
i=0
dsappurl = []
while i < num_devices:
	dsappurl.append('https://graph.api.smartthings.com/api/smartapps/installations/' + dsappid[i]  + '/update?access_token=' + ds_token[i] )
	i += 1


#device files array
dsfile = []
for tmpdsid in dsid:
   dsfile.append(base_dir + tmpdsid + '/w1_slave')


#access_token array
#access_token = []
#for tmpep in dsendpoint:
#   access_token.append(re.search('access_token=(.+?)/', tmpep).group(1))

#num_devices = len(dsid)
#i=0
#while i < num_devices:
#	print ("device name: %s\tdevice id: %s\tdevice_file: %s\tdevice_endpoint: %s\taccess_token: %s" % (dsname[i], dsid[i], dsfile[i], dsendpoint[i], access_token[i]))
#	i += 1

#exit()


niters = 60
interval = 1
 
def read_temp_raw(cntc):
	catdata = subprocess.Popen(['cat',dsfile[cntc]], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	out,err = catdata.communicate()
	out_decode = out.decode('utf-8')
	lines = out_decode.split('\n')
	return lines
 
def read_temp(cntb):
    lines = read_temp_raw(cntb)
    while lines[0].strip()[-3:] != 'YES':
        time.sleep(0.2)
        lines = read_temp_raw()
    equals_pos = lines[1].find('t=')
    if equals_pos != -1:
        temp_string = lines[1][equals_pos+2:]
        temp_c = float(temp_string) / 1000.0
        temp_f = temp_c * 9.0 / 5.0 + 32.0
        return temp_c, temp_f

def main():
   old_temp = []
   for tmpdsid in dsid:
       old_temp.append(-99999999.99)

#   endpoints_url = "https://graph.api.smartthings.com/api/smartapps/endpoints/%s?access_token=%s" % (client, access_token)
   for counter in range(niters, 0, -1):
       cnta=0

       for dsapp in dsappurl:
#          endpoints_url = "https://graph.api.smartthings.com/api/smartapps/endpoints/%s?access_token=%s" % (client, access_token)
#          print ("endpoints_url: %s" % (endpoints_url))
            print ("dsappurl: %s" % (dsapp))
            r = requests.get(dsapp)
            if (r.status_code != 200):
                print("Error: " + str(r.status_code))
            else:
                print("Waiting...")
             
#              (temp_c, temp_f) = read_temp(cnta)
#              temp_url = endp + ("%.2f/F" % temp_f)
#              headers = { 'Authorization' : 'Bearer ' + access_token[cnta] }
#              if ( round(temp_f, 2) != round(old_temp[cnta], 2) ):
#                 print ("URL: %s" % (temp_url))
#                 print ("Niter: %s\tdate: %s\tdsname: %s\ttemp_f: %s" % (counter, (datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")), dsname[cnta], temp_f))
#                 r = requests.put(temp_url, headers=headers)
#                 old_temp[cnta] = temp_f
#              cnta += 1
       time.sleep(interval)

main()

#def main():
#   old_temp = -999999999.99
#   endpoints_url = "https://graph.api.smartthings.com/api/smartapps/endpoints/%s?access_token=%s" % (client, access_token)
#   print ("endpoints_url: %s" % (endpoints_url))
#   r = requests.get(endpoints_url)
#   if (r.status_code != 200):
#      print("Error: " + r.status_code)
#   else:
#      theendpoints = json.loads( r.text )
#      print ("theendpoints: %s" % (theendpoints))
#      for counter in range(niters, 0, -1):
#         (temp_c, temp_f) = read_temp()
#         for endp in theendpoints:
#            uri = endp['uri']
#            temp_url = uri + ("/update/%.2f/F" % temp_f)
#            print ("URL: %s" % (temp_url))
#            headers = { 'Authorization' : 'Bearer ' + access_token }
#            if ( round(temp_f, 2) != round(old_temp, 2) ):
#               print ("Niter: %s\tdate: %s\ttemp_f: %s" % (counter, (datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")), temp_f))
#               r = requests.put(temp_url, headers=headers)
#         old_temp = temp_f
#         time.sleep(interval)
